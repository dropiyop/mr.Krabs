from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler.executors.asyncio import AsyncIOExecutor

from main import logger


class SchedulerManager:
    def __init__(self):
        self.scheduler = None

    def setup(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        try:
            import editabs

            self.scheduler = AsyncIOScheduler(
                executors={'default': AsyncIOExecutor()},
                timezone='Europe/Moscow'
                )

            self.scheduler.add_job(
                func=editabs.clear_zakupkigov,
                trigger=CronTrigger(hour=0, minute=5),
                id='daily_cleanup',
                name='–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ zakupkigov',
                replace_existing=True,
                max_instances=1
                )

            logger.info("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω:")
            logger.info("–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:05")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            return False

    def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        try:
            if self.scheduler is None:
                logger.info("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return False

            if not self.scheduler.running:
                self.scheduler.start()
                logger.info("üéØ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
                return True
            else:
                logger.info("‚ÑπÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            return False
