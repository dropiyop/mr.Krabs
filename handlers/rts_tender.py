import re
from datetime import datetime, date
from playwright.sync_api import sync_playwright
import json
import time
import asyncio
from aiog import *
import editabs
import init_clients
from simple_tg_md import convert_to_md2
from concurrent.futures import ThreadPoolExecutor
from datetime import datetime
import openai
from pathlib import Path
import websockets
import threading


def load_keywords(filepath: str = r"../keywords") -> list[str]:
    with open(filepath, "r", encoding="utf-8") as f:
        return [line.strip() for line in f if line.strip()]


def load_prompt(filename: str = "../prompt.txt") -> list[str]:
    current_file = Path(__file__)
    project_root = current_file.parent.parent
    filepath = project_root / filename

    if not filepath.exists():
        raise FileNotFoundError(f"–§–∞–π–ª {filepath} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    with open(filepath, "r", encoding="utf-8") as f:
        return [line.strip() for line in f if line.strip()]


prompt = load_prompt("prompt.txt")


class RTSWebSocketVerification:
    """–ö–ª–∞—Å—Å –¥–ª—è WebSocket –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ SignalR"""

    def __init__(self, cookies_dict):
        self.cookies_dict = cookies_dict
        self.verification_complete = False
        self.verification_token = None

    def get_cookie_string(self):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ª–æ–≤–∞—Ä—å cookies –≤ —Å—Ç—Ä–æ–∫—É"""
        return '; '.join([f"{k}={v}" for k, v in self.cookies_dict.items()])

    async def verify_async(self, timeout=10):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è WebSocket –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–∑ curl
            headers = {
                "Pragma": "no-cache",
                "Origin": "https://www.rts-tender.ru",
                "Accept-Language": "ru,en;q=0.9",
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 YaBrowser/24.1.0.0 Safari/537.36",
                "Cache-Control": "no-cache",
                "Cookie": self.get_cookie_string(),
                "Sec-WebSocket-Version": "13",
                "Sec-WebSocket-Extensions": "permessage-deflate; client_max_window_bits"
                }

            print("üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket (–ø–µ—Ä–≤–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è)...")

            # –ü–ï–†–í–ê–Ø –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø
            async with websockets.connect(
                    "wss://www.rts-tender.ru/poisk/verification",
                    extra_headers=headers,
                    timeout=timeout,
                    compression="deflate"
                    ) as websocket:
                print("‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (–ø–µ—Ä–≤–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è)")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–≤–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                messages = [
                    '{"protocol":"json","version":1}',
                    '{}',
                    '{"arguments":[],"invocationId":"0","target":"SetToken","type":1}',
                    ]

                for i, msg in enumerate(messages):
                    print(f"üì§ –ü–µ—Ä–≤–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ {i + 1}: {msg}")
                    await websocket.send(msg)
                    await asyncio.sleep(0.5)

                # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç—ã –æ—Ç –ø–µ—Ä–≤–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                try:
                    timeout_counter = 0
                    async for message in websocket:
                        print(f"üì® –ü–µ—Ä–≤–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è - WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
                        timeout_counter += 1

                        try:
                            if message.startswith('{"type":3'):
                                data = json.loads(message)
                                if data.get('invocationId') == '0' and 'result' in data:
                                    if data['result']:
                                        first_token = data['result']
                                        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω –ø–µ—Ä–≤–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {first_token}")
                                        break
                        except json.JSONDecodeError:
                            continue

                        if timeout_counter > 10:  # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è
                            break

                except asyncio.TimeoutError:
                    print("‚è∞ –¢–∞–π–º–∞—É—Ç –ø–µ—Ä–≤–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")

            print("üîå –ù–∞—á–∏–Ω–∞–µ–º –≤—Ç–æ—Ä—É—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é...")
            await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è–º–∏

            # –í–¢–û–†–ê–Ø –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø
            async with websockets.connect(
                    "wss://www.rts-tender.ru/poisk/verification",
                    extra_headers=headers,
                    timeout=timeout,
                    compression="deflate"
                    ) as websocket:
                print("‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (–≤—Ç–æ—Ä–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è)")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤—Ç–æ—Ä–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                messages = [
                    '{"protocol":"json","version":1}',
                    '{}',
                    '{"arguments":[],"invocationId":"0","target":"SetToken","type":1}',
                    ]

                for i, msg in enumerate(messages):
                    print(f"üì§ –í—Ç–æ—Ä–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ {i + 1}: {msg}")
                    await websocket.send(msg)
                    await asyncio.sleep(0.5)

                # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç—ã –æ—Ç –≤—Ç–æ—Ä–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                try:
                    timeout_counter = 0
                    async for message in websocket:
                        print(f"üì® –í—Ç–æ—Ä–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è - WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
                        timeout_counter += 1

                        try:
                            if message.startswith('{"type":3'):
                                data = json.loads(message)
                                if data.get('invocationId') == '0' and 'result' in data:
                                    if data['result']:
                                        self.verification_token = data['result']
                                        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {self.verification_token}")
                                        return True
                                    else:
                                        print("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ç–æ—Ä–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                                        return False
                        except json.JSONDecodeError:
                            continue

                        if timeout_counter > 10:  # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è
                            break

                except asyncio.TimeoutError:
                    print("‚è∞ –¢–∞–π–º–∞—É—Ç –≤—Ç–æ—Ä–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                    return False

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ WebSocket –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return False

    def verify(self, timeout=10):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è WebSocket –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                result = loop.run_until_complete(self.verify_async(timeout))
                return result
            finally:
                loop.close()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π WebSocket –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return False


def filter_by_today_date(notices):
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç –∑–∞–ø–∏—Å–∏ —Ç–æ–ª—å–∫–æ –ø–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–µ"""
    today = datetime.now().strftime("%d.%m.%Y")
    today_notices = []

    print(f"üóìÔ∏è –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–µ: {today}")

    for notice in notices:
        pub_date = notice.get('publishDate', notice.get('pub_date', ''))

        if pub_date and isinstance(pub_date, str):
            try:
                if 'T' in pub_date:
                    parsed_date = datetime.fromisoformat(pub_date.replace('Z', '+00:00'))
                    pub_date = parsed_date.strftime("%d.%m.%Y")
            except:
                pass

        if pub_date == today:
            today_notices.append(notice)
        else:
            print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å —Å –¥–∞—Ç–æ–π {pub_date}: {notice.get('notificationNumber', 'Unknown')}")

    print(f"üìÖ –ù–∞–π–¥–µ–Ω–æ {len(today_notices)} –∑–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏–∑ {len(notices)} –æ–±—â–∏—Ö")
    return today_notices


async def filter_notices(notices, keywords):
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º"""
    sent_count = 0
    filtered_notices = []

    for notice in notices:
        search_text = f"{notice.get('subject', '')} {notice.get('customerName', '')} {notice.get('name', '')}"

        number = notice.get('notificationNumber', notice.get('number', ''))
        if not number or number.strip() == '' or number == 'N/A':
            print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–∫—É–ø–∫—É –±–µ–∑ –Ω–æ–º–µ—Ä–∞: {notice.get('subject', 'Unknown')}")
            continue

        if editabs.check(number, fz=None):
            print(f"üîÅ –ó–∞–∫—É–ø–∫–∞ {number} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞–Ω–µ–µ")
            continue

        if number:
            editabs.save(number, fz=None)
            print(f"üíæ –ù–æ–º–µ—Ä {number} —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

        if not any(keyword.lower() in search_text.lower() for keyword in keywords):
            continue
        else:
            response = await init_clients.client_openai.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": f"{prompt}"},
                    {"role": "user", "content": f"{notice}\n{keywords}"}
                    ],
                temperature=0.2,
                )

            answer_gpt = response.choices[0].message.content.strip()
            print(answer_gpt)
            if answer_gpt.lower() == '–Ω–µ—Ç':
                print(f"‚õî –ó–∞–∫—É–ø–∫–∞ {number} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ GPT")
                continue

            filtered_notices.append(notice)
            sent_count += 1
            print(f"‚úÖ –ó–∞–∫—É–ø–∫–∞ {number} –ø—Ä–æ—à–ª–∞ —Ñ–∏–ª—å—Ç—Ä")

    return filtered_notices, sent_count


async def send_notifications(notice):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    users_data = editabs.get_client_users()
    success_count = 0

    for user_data in users_data:
        chat_id = user_data[0] if isinstance(user_data, tuple) else user_data

        if not chat_id:
            continue

        try:
            number = notice.get('notificationNumber', notice.get('number', ''))
            full_url = f"https://www.rts-tender.ru/poisk/Notice/Notice/{number}"

            price = notice.get('maxPrice', notice.get('price', 'N/A'))
            if isinstance(price, (int, float)) and price > 0:
                price_text = f"{price:,.0f} —Ä—É–±.".replace(',', ' ')
            else:
                price_text = 'N/A'

            text = f"""üîî –ù–æ–≤–∞—è –∑–∞–∫—É–ø–∫–∞ —Å –†–¢–°-–¢–µ–Ω–¥–µ—Ä

üìù *–ù–æ–º–µ—Ä:* {convert_to_md2(number)}
üìã *–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:* {convert_to_md2(notice.get('subject', notice.get('name', 'N/A')))}
üè¢ *–ó–∞–∫–∞–∑—á–∏–∫:* {convert_to_md2(notice.get('customerName', 'N/A'))}
üí∞ *–ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:* {convert_to_md2(price_text)}
üìÖ *–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:* {convert_to_md2(notice.get('publishDate', notice.get('pub_date', 'N/A')))}
"""

            markup = InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –∑–∞–∫—É–ø–∫—É", url=full_url)]]
                )

            await init_clients.bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=markup,
                parse_mode=aiogram.enums.ParseMode.MARKDOWN_V2
                )

            success_count += 1
            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è chat_id: {chat_id}")
            await asyncio.sleep(0.5)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–ª—è chat_id {chat_id}: {e}")

    return success_count


async def send_all_filtered_notices(filtered_notices):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    total_sent = 0

    for notice in filtered_notices:
        number = notice.get('notificationNumber', notice.get('number', 'Unknown'))
        subject = notice.get('subject', notice.get('name', 'Unknown'))
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º: {number} - {subject}")
        sent_count = await send_notifications(notice)
        if sent_count > 0:
            total_sent += 1

        await asyncio.sleep(2)

    print(f"üèÅ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {total_sent} –∑–∞–∫—É–ø–æ–∫ –∏–∑ {len(filtered_notices)}")
    return total_sent


def scrape_rts_tender_sync():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ RTS-Tender —Å WebSocket –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π"""
    notices_data = []
    current_page = 0
    today = date.today()
    today_formatted = today.strftime("%d.%m.%Y")
    should_continue = True
    max_pages = 10

    with sync_playwright() as p:
        browser = p.chromium.launch(
            headless=True,
            args=['--no-sandbox', '--disable-blink-features=AutomationControlled']
            )

        context = browser.new_context(
            viewport={'width': 1920, 'height': 1080},
            user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36',
            locale='ru-RU',
            ignore_https_errors=True
            )

        context.add_init_script("""
            Object.defineProperty(navigator, 'webdriver', {
                get: () => undefined,
            });
        """)

        page = context.new_page()

        page.set_extra_http_headers({
            'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
            'Accept-Encoding': 'gzip, deflate, br, zstd',
            'Cache-Control': 'max-age=0',
            'Sec-CH-UA': '"Not)A;Brand";v="8", "Chromium";v="138", "Google Chrome";v="138"',
            'Sec-CH-UA-Mobile': '?0',
            'Sec-CH-UA-Platform': '"Windows"',
            'Sec-Fetch-Dest': 'document',
            'Sec-Fetch-Mode': 'navigate',
            'Sec-Fetch-Site': 'none',
            'Sec-Fetch-User': '?1',
            'Upgrade-Insecure-Requests': '1'
            })

        def handle_response(response):
            nonlocal notices_data, should_continue
            if "ajaxwithfullmodel" in response.url:
                print(f"üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç API –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {current_page}: {response.url}")
                try:
                    data = response.json()
                    print(f"üìä –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(data)}")

                    page_notices = []
                    if isinstance(data, dict):
                        if 'items' in data:
                            page_notices = data['items']
                        elif 'data' in data:
                            page_notices = data['data']
                        elif 'notices' in data:
                            page_notices = data['notices']
                        else:
                            print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {list(data.keys())}")
                    elif isinstance(data, list):
                        page_notices = data

                    notices_data.extend(page_notices)
                    print(f"üìã –î–æ–±–∞–≤–ª–µ–Ω–æ {len(page_notices)} –∑–∞–ø–∏—Å–µ–π —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {current_page}")

                    today_found = False
                    for notice in page_notices:
                        pub_date = notice.get('publishDate', '')
                        if pub_date:
                            try:
                                if 'T' in pub_date:
                                    parsed_date = datetime.fromisoformat(pub_date.replace('Z', '+00:00'))
                                    date_str = parsed_date.strftime("%d.%m.%Y")
                                    if date_str == today_formatted:
                                        today_found = True
                                        break
                            except:
                                continue

                    if not today_found and len(page_notices) > 0:
                        print("‚èπÔ∏è –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è")
                        should_continue = False

                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")

        page.on("response", handle_response)


        try:
            print("üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞ RTS-Tender...")
            page.goto('https://www.rts-tender.ru/poisk/search', timeout=30000)
            page.wait_for_timeout(1000)

            # –ü—Ä–æ—Ö–æ–¥–∏–º Anti-DDoS –∑–∞—â–∏—Ç—É
            print("üîÑ –ü—Ä–æ—Ö–æ–¥–∏–º Anti-DDoS –∑–∞—â–∏—Ç—É...")
            try:
                page.wait_for_function(
                    "document.getElementById('statusText') === null || document.getElementById('statusText').textContent.includes('–û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É')",
                    timeout=15000
                    )

                if page.locator('#statusText').count() > 0:
                    print("‚è≥ –ñ–¥–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
                    page.wait_for_url('**/poisk/search', timeout=20000)

            except Exception as e:
                print(f"‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–∞—è –æ—à–∏–±–∫–∞ Anti-DDoS: {e}")
                page.reload(timeout=30000)

            page.wait_for_load_state("networkidle")
            print("‚úÖ Anti-DDoS –∑–∞—â–∏—Ç–∞ –ø—Ä–æ–π–¥–µ–Ω–∞!")

            # –ü–æ–ª—É—á–∞–µ–º cookies –∏ —Ç–æ–∫–µ–Ω—ã –¥–ª—è WebSocket –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            cookies = context.cookies()
            cookies_dict = {cookie['name']: cookie['value'] for cookie in cookies}

            print("üîå –ù–∞—á–∏–Ω–∞–µ–º WebSocket –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –í –°–ê–ú–û–ú –ù–ê–ß–ê–õ–ï...")
            ws_verification = RTSWebSocketVerification(cookies_dict)

            if ws_verification.verify(timeout=15):
                print("‚úÖ WebSocket –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                verification_token = ws_verification.verification_token
                if verification_token:
                    print(f"üé´ –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {verification_token}")
                else:
                    print("‚ö†Ô∏è –¢–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω")
            else:
                print("‚ùå WebSocket –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å!")
                return []  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞

            xsrf_token = cookies_dict.get('XSRF-TOKEN')
            if not xsrf_token:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å XSRF —Ç–æ–∫–µ–Ω")
                return []

            print(f"üîê –ü–æ–ª—É—á–µ–Ω XSRF —Ç–æ–∫–µ–Ω: {xsrf_token}")



            # –ü–æ–ª—É—á–∞–µ–º hidden –ø–æ–ª—è
            hidden = {}
            for inp in page.query_selector_all('#hiddenForm input[type="hidden"]'):
                name = inp.get_attribute('name')
                val = inp.get_attribute('value')
                if name == 'AllCount':
                    try:
                        val = int(val)
                    except:
                        pass
                hidden[name] = val

            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞
            search_filter = {
                "filter": {
                    "contractStatuses": [],
                    "notificationStatuses": [1],
                    "isSearch223": True,
                    "isSearch44": True,
                    "isSearch615": False,
                    "isSearchCOM": False,
                    "isSearchZMO": True,
                    "isSearchSP": False,
                    "isSearchRFP": False,
                    "customerIds": [],
                    "deliveryRegionIds": [],
                    "etpCodes": [],
                    "inn": None,
                    "innConcurents": None,
                    "innOrganizers": None,
                    "nmcIds": [],
                    "number": None,
                    "okeiCodes": [],
                    "okpd2Codes": [],
                    "ktruCodes": [],
                    "preferenseIds": [],
                    "pwsIds": list(range(1, 26)),
                    "regionIds": [],
                    "restrict": [],
                    "stateAtMarketPlace": [],
                    "truName": None,
                    "applicationGuaranteeAmount": None,
                    "auctionTimeEnd": None,
                    "auctionTimeStart": None,
                    "collectingEndDateEnd": None,
                    "collectingEndDateStart": None,
                    "contractGuaranteeAmount": None,
                    "contractSignEnd": None,
                    "contractSignStart": None,
                    "createDateEnd": None,
                    "createDateStart": None,
                    "isExactMatch": False,
                    "isMedicAnalog": False,
                    "isNotJoint": False,
                    "isSearchAttachment": True,
                    "isSearchByOrganization": False,
                    "isSearchNotActualStandarts": False,
                    "isSearchPaymentDate": False,
                    "isSearchPrePayment": False,
                    "isSmp": None,
                    "nmcFrom": 0,
                    "nmcTo": None,
                    "priceFrom": None,
                    "priceTo": None,
                    "publishDateEnd": None,
                    "publishDateStart": None,
                    "quantityFrom": None,
                    "quantityTo": None,
                    "withoutApplicationGuarantee": False,
                    "withoutContractGuarantee": False
                    },
                "isAscendingSorting": False,
                "searchQuery": "",
                "skip": 0,
                "sort": "PublishDate",
                "top": 50,
                "type": 1,
                "RegionAlias": "",
                "CityName": ""
                }

            flt = {k: v for k, v in search_filter['filter'].items() if v is not None}
            flt['isSearch615'] = False
            flt['isSearchCOM'] = False
            flt['isSearchZMO'] = False
            flt['isSearchSP'] = False

            check_payload = {
                "filter": flt,
                "SearchProfileId": hidden["SearchProfileId"],
                "Type": hidden["Type"],
                "AllCount": hidden["AllCount"]
                }

            while should_continue and current_page < max_pages:
                print(f"üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {current_page + 1}...")

                search_filter["skip"] = current_page * search_filter["top"]

                try:
                    response1 = page.request.post(
                        'https://www.rts-tender.ru/poisk/search/ajax/checkqueryforindustry',
                        headers={
                            'Accept': 'application/json, text/plain, */*',
                            'Content-Type': 'application/json',
                            'X-XSRF-Token': xsrf_token,
                            'X-Requested-With': 'XMLHttpRequest'
                            },
                        data=json.dumps(check_payload, ensure_ascii=False)
                        )

                    if response1.status != 200:
                        print(f"‚ùå –û—à–∏–±–∫–∞ industry check: {response1.status}")
                        break

                    response2 = page.request.post(
                        'https://www.rts-tender.ru/poisk/search/ajaxwithfullmodel',
                        headers={
                            'Accept': 'application/json, text/plain, */*',
                            'Accept-Language': 'ru,en;q=0.9',
                            'Connection': 'keep-alive',
                            'Content-Type': 'application/json',
                            'FOToken': verification_token if verification_token else '',
                            'Origin': 'https://www.rts-tender.ru',
                            'Referer': 'https://www.rts-tender.ru/poisk/search',
                            'Sec-Fetch-Dest': 'empty',
                            'Sec-Fetch-Mode': 'cors',
                            'Sec-Fetch-Site': 'same-origin',
                            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 YaBrowser/24.1.0.0 Safari/537.36',
                            'X-Requested-With': 'XMLHttpRequest',
                            'X-XSRF-TOKEN': xsrf_token,
                            'sec-ch-ua': '"Not_A Brand";v="8", "Chromium";v="120", "YaBrowser";v="24.1", "Yowser";v="2.5", "YaBrowserCorp";v="120.0"',
                            'sec-ch-ua-mobile': '?0',
                            'sec-ch-ua-platform': '"Windows"'
                            },
                        data=json.dumps(check_payload)
                        )

                    if response2.status != 200:
                        print(f"‚ùå –û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞: {response2.status}")
                        break

                    page.wait_for_timeout(2000)
                    current_page += 1

                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ API –∑–∞–ø—Ä–æ—Å–µ: {e}")
                    break

        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞: {e}")

        finally:
            browser.close()

    print(f"‚úÖ –ò—Ç–æ–≥–æ —Å–æ–±—Ä–∞–Ω–æ {len(notices_data)} –∑–∞–ø–∏—Å–µ–π —Å {current_page} —Å—Ç—Ä–∞–Ω–∏—Ü")

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    today_notices = []
    today_str = today.strftime("%d.%m.%Y")

    for notice in notices_data:
        pub_date = notice.get('publishDate', '')
        if pub_date:
            try:
                if 'T' in pub_date:
                    parsed_date = datetime.fromisoformat(pub_date.replace('Z', '+00:00'))
                    date_str = parsed_date.strftime("%d.%m.%Y")
                    if date_str == today_str:
                        today_notices.append(notice)
            except:
                continue

    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(today_notices)} –∑–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏–∑ {len(notices_data)} –æ–±—â–∏—Ö")
    return today_notices


async def periodic_check_rts_tender():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ RTS-Tender"""
    while True:
        try:
            print(f"\n[{datetime.now()}] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É RTS-Tender")

            keywords = load_keywords()

            loop = asyncio.get_event_loop()
            with ThreadPoolExecutor() as executor:
                notices_data = await loop.run_in_executor(executor, scrape_rts_tender_sync)

            if notices_data:
                print(f"–ü–æ–ª—É—á–µ–Ω–æ {len(notices_data)} –∑–∞–∫—É–ø–æ–∫")
                today_notices = filter_by_today_date(notices_data)

                if not today_notices:
                    print("üìÖ –ù–µ—Ç –∑–∞–∫—É–ø–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É")
                else:
                    print("üîç –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è:")
                    for i, notice in enumerate(today_notices[:2]):
                        print(f"  –ó–∞–ø–∏—Å—å {i + 1}:")
                        print(f"    number: '{notice.get('notificationNumber', 'MISSING')}'")
                        print(f"    subject: '{notice.get('subject', 'MISSING')}'")

                    filtered_notices, found_count = await filter_notices(notices_data, keywords)
                    print(f"–ù–∞–π–¥–µ–Ω–æ {found_count} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–∫—É–ø–æ–∫ –∏–∑ {len(notices_data)} –æ–±—â–∏—Ö")

                    if filtered_notices:
                        sent_count = await send_all_filtered_notices(filtered_notices)
                        print(f"‚úÖ RTS-Tender: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                    else:
                        print("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–∫—É–ø–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            else:
                print("–î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ RTS-Tender: {e}")
            import traceback
            traceback.print_exc()

        print("‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ RTS-Tender —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç...")
        await asyncio.sleep(600)


# –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞
if __name__ == "__main__":
    asyncio.run(periodic_check_rts_tender())