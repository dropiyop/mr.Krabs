from http.client import responses
import re
from datetime import datetime, date
from playwright.sync_api import sync_playwright
import json
import time
import asyncio
from aiog import *
import re
import editabs
import init_clients
from simple_tg_md import convert_to_md2
from concurrent.futures import ThreadPoolExecutor
from datetime import datetime
import openai


def load_keywords(filepath: str = r"keywords") -> list[str]:
    with open(filepath, "r", encoding="utf-8") as f:
        return [line.strip() for line in f if line.strip()]




def filter_by_today_date(notices):
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç –∑–∞–ø–∏—Å–∏ —Ç–æ–ª—å–∫–æ –ø–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–µ"""
    today = datetime.now().strftime("%d.%m.%Y")
    today_notices = []

    print(f"üóìÔ∏è –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–µ: {today}")

    for notice in notices:
        pub_date = notice.get('pub_date', '')
        if pub_date == today:
            today_notices.append(notice)
        else:
            print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å —Å –¥–∞—Ç–æ–π {pub_date}: {notice.get('number', 'Unknown')}")

    print(f"üìÖ –ù–∞–π–¥–µ–Ω–æ {len(today_notices)} –∑–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏–∑ {len(notices)} –æ–±—â–∏—Ö")
    return today_notices



async def filter_notices(notices, keywords):
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º –∏ —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –¢–ì"""
    sent_count = 0
    filtered_notices = []

    for notice in notices:
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
        search_text = f"{notice.get('name', '')} {notice.get('uchr_sname', '')}"


        number = notice.get('number', '')
        if not number or number.strip() == '' or number == 'N/A':
            print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–∫—É–ø–∫—É –±–µ–∑ –Ω–æ–º–µ—Ä–∞: {notice.get('name', 'Unknown')}")

        if  editabs.check(number, fz=None):
            print(f"üîÅ –ó–∞–∫—É–ø–∫–∞ {number} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞–Ω–µ–µ")
            continue

        if number:
            editabs.save(number, fz=None)
            print(f"üíæ –ù–æ–º–µ—Ä {number} —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        if not any(keyword.lower() in search_text.lower() for keyword in keywords):
            continue
        else:
            # GPT-—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
            response = await init_clients.client_openai.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –≤ it –∫–æ–º–ø–∞–Ω–∏–∏. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –∑–∞–∫—É–ø–∫–∞—Ö."
                                              "–û—Ç—Ä–∞—Å–ª—å:"
                                              "–ü—Ä–∏—Å—ã–ª–∞—é —Ç–µ–±–µ —Ç–∞–∫–∂–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Å–≤–µ—Ä–∫–∏"
                                              "–æ—Ä–∏–µ–Ω–∏—Ç—Ä—É–π—Å—è  —Ç–∞–∫–∂–µ –ø–æ –Ω–∏–º"
                                              "–ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ. –°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ"
                                              "–ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ (—é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ, –±—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–æ–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ-—Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã). –°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ."
                                              "–ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ (–¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª—è—Ö). –°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ."
                                              "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ-–∫–∞—Å—Å–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã"
                                              "–°–æ–∑–¥–∞–Ω–∏–µ –∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–∞–π—Ç–æ–≤"
                                              "–£—Å–ª—É–≥–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è"
                                              "–ü—Ä–æ—á–∏–µ —É—Å–ª—É–≥–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π"
                                              "–£—Å–ª—É–≥–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ –∑–∞—â–∏—Ç—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
                                              "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞—â–∏—Ç—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
                                              "–£—Å–ª—É–≥–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏ –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏"
                                              "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è"
                                              "–¢–∞–∫–∂–µ, –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–∫—É–ø–æ–∫, –Ω–µ –ø—Ä–∏–º–µ–Ω—è–π —ç—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ, —ç—Ç–æ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:"
                                              "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–ª—è–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ : –ø–æ—Å—Ç–∞–≤–∫–∞  —Å—Ä–µ–¥—Å—Ç–≤–∞ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –∑–∞—â–∏—Ç—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
                                              "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º —Ç–æ–≤–∞—Ä–∞ –∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: –ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–∞—Å—Ç–æ—è—â–∏–º –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —Ç–æ–≤–∞—Ä, "
                                               "–ø–æ—Å—Ç–∞–≤–ª—è–µ–º—ã–π –≤ —Ä–∞–º–∫–∞—Ö –¥–æ–≥–æ–≤–æ—Ä–∞, —è–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤—ã–º, –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–º, —Å–µ—Ä–∏–π–Ω—ã–º, –æ—Ç—Ä–∞–∂–∞—é—â–∏–º –≤—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏. "
                                              "–ü–æ—Å—Ç–∞–≤–ª—è–µ–º—ã–π —Ç–æ–≤–∞—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–ø–∞–∫–æ–≤–∞–Ω –∏ –∑–∞–º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –¥–µ–π—Å—Ç–≤—É—é—â–∏–º–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏. –¢–∞—Ä–∞ –∏ —É–ø–∞–∫–æ–≤–∫–∞                                "
                                              "–¥–æ–ª–∂–Ω—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–∑–∫–µ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–∏. –£–ø–∞–∫–æ–≤–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–∫—Ä—ã—Ç–∏–π, –≤–º—è—Ç–∏–Ω, "
                                              "–ø–æ—Ä–µ–∑–æ–≤ –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–∏."
                                              "–ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ö–æ–¥–∏—Ç, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–π —Ä–æ–≤–Ω–æ —Ç–æ—Ç –∂–µ —Ç–µ–∫—Å—Ç —á—Ç–æ —Ç–µ–±–µ –∏ –ø—Ä–∏—à–µ–ª."
                                              "–ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –æ—Ç–≤–µ—Ç—å '–Ω–µ—Ç'"
                 },
                {"role": "user", "content":  f"{notice}\n{keywords}" }
                ],
                temperature=0.2,
            )

            answer_gpt = response.choices[0].message.content.strip()
            print(answer_gpt)
            if answer_gpt.lower() == '–Ω–µ—Ç':
                print(f"‚õî –ó–∞–∫—É–ø–∫–∞ {number} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ GPT")
                continue


            filtered_notices.append(notice)
            sent_count += 1
            print(f"‚úÖ –ó–∞–∫—É–ø–∫–∞ {number} –ø—Ä–æ—à–ª–∞ —Ñ–∏–ª—å—Ç—Ä")

    return filtered_notices, sent_count



async def send_notifications(notice):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    users_data = editabs.get_client_users()
    success_count = 0

    for user_data in users_data:
        chat_id = user_data[0] if isinstance(user_data, tuple) else user_data

        if not chat_id:
            continue

        print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º chat_id: {chat_id}")
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
            full_url = f"https://mimz.admoblkaluga.ru/GzwSP/Notice?noticeLink={notice['link']}"

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            text = f"""üîî –ù–æ–≤–∞—è –∑–∞–∫—É–ø–∫–∞ —Å —Å–∞–π—Ç–∞  –ú–ò–ú–ó

üìù *–ù–æ–º–µ—Ä:* {convert_to_md2(notice.get('number', 'N/A'))}
üìã *–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:* {convert_to_md2(notice.get('name', 'N/A'))}
"""

            # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            markup = InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å –∑–∞–∫—É–ø–∫—É", url=full_url)]]
                )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await init_clients.bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=markup,
                parse_mode=aiogram.enums.ParseMode.MARKDOWN_V2
                )

            success_count += 1
            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è chat_id: {chat_id}")

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            await asyncio.sleep(0.5)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–ª—è chat_id {chat_id}: {e}")



    return success_count


async def send_all_filtered_notices(filtered_notices):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    total_sent = 0

    for notice in filtered_notices:
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º: {notice.get('number')} - {notice.get('name')}")
        sent_count = await send_notifications(notice)
        if sent_count > 0:
            total_sent += 1

        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ –∑–∞–∫—É–ø–∫–∞–º–∏
        await asyncio.sleep(2)

    print(f"üèÅ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {total_sent} –∑–∞–∫—É–ø–æ–∫ –∏–∑ {len(filtered_notices)}")
    return total_sent


def scrape_mimz_sync():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –ú–ò–ú–ó —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π"""

    notices_data = []
    current_page = 1
    today = date.today()
    today_formatted = today.strftime("%d.%m.%Y")
    should_continue = True

    print(f"üóìÔ∏è –ò—â–µ–º –∑–∞–ø–∏—Å–∏ —Å –¥–∞—Ç–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {today_formatted} (—Å–µ–≥–æ–¥–Ω—è: {today})")

    with sync_playwright() as p:
        browser = p.chromium.launch(
            headless=True,
            executable_path="/snap/bin/chromium"
            )
        context = browser.new_context(ignore_https_errors=True)
        page = context.new_page()

        def handle_response(response):
            nonlocal notices_data
            if "NoticesJson" in response.url:
                print(f"üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {current_page}: {response.url}")
                try:
                    data = response.json()
                    print(f"üìä –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(data)}")

                    page_notices = []
                    if isinstance(data, list):
                        page_notices = data
                    elif isinstance(data, dict):
                        if 'data' in data:
                            page_notices = data['data']
                        elif 'items' in data:
                            page_notices = data['items']
                        elif 'notices' in data:
                            page_notices = data['notices']
                        else:
                            page_notices = [data]

                    notices_data.extend(page_notices)
                    print(f"üìã –î–æ–±–∞–≤–ª–µ–Ω–æ {len(page_notices)} –∑–∞–ø–∏—Å–µ–π —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {current_page}")

                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")

        page.on("response", handle_response)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        print("üåê –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
        page.goto("https://mimz.admoblkaluga.ru/GzwSP/NoticesGrid")
        page.wait_for_load_state("networkidle")
        page.wait_for_timeout(3000)

        while should_continue:
            print(f"\nüìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {current_page}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            try:
                page.wait_for_timeout(2000)

                publication_date_found = False
                dates_on_page = []

                try:
                    date_captions = page.query_selector_all("span.caption:has-text('–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏')")
                    print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ {len(date_captions)} –±–ª–æ–∫–æ–≤ '–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏'")

                    for i, caption in enumerate(date_captions):
                        try:
                            parent_td = caption.query_selector("xpath=..")
                            if parent_td:
                                spans_in_td = parent_td.query_selector_all("span")

                                for span in spans_in_td:
                                    span_text = span.inner_text().strip()
                                    date_match = re.match(r'^(\d{1,2})\.(\d{1,2})\.(\d{4})$', span_text)
                                    if date_match:
                                        day, month, year = map(int, date_match.groups())
                                        try:
                                            parsed_date = date(year, month, day)
                                            dates_on_page.append(parsed_date)
                                            print(f"üìÖ –ù–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –±–ª–æ–∫–µ {i + 1}: {parsed_date}")

                                            if parsed_date == today:
                                                publication_date_found = True
                                                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {parsed_date}")

                                        except ValueError:
                                            continue

                        except Exception as block_error:
                            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–ª–æ–∫–∞ –¥–∞—Ç—ã {i + 1}: {block_error}")
                            continue

                except Exception as search_error:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –±–ª–æ–∫–æ–≤ –¥–∞—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {search_error}")

                print(f"üìÖ –ù–∞–π–¥–µ–Ω–æ –¥–∞—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(dates_on_page)}")
                if dates_on_page:
                    dates_sorted = sorted(dates_on_page)
                    print(f"üìÖ –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç: {dates_sorted[0]} - {dates_sorted[-1]}")

                # –õ–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: –µ—Å–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –¥–∞—Ç
                if not publication_date_found:
                    if dates_on_page and all(d < today for d in dates_on_page):
                        print("‚èπÔ∏è –í—Å–µ –¥–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å—Ç–∞—Ä—à–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è")
                        break

            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞—Ç: {e}")

            next_button = None
            try:
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É "—Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞" (span.page.next)
                next_button = page.query_selector("span.page.next:not(:has(span:text-is(' ')))")

                if not next_button:
                    # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ next –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—â–µ–º span —Å –Ω–æ–º–µ—Ä–æ–º —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    # –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–º–µ–µ—Ç –∫–ª–∞—Å—Å active, –Ω–∞–º –Ω—É–∂–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è
                    next_page_selector = f"span.page[value='{current_page}']:not(.active)"
                    next_button = page.query_selector(next_page_selector)

                    if next_button:
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {current_page + 1}")

                if not next_button:
                    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±: –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –≤–∑—è—Ç—å —Å–ª–µ–¥—É—é—â—É—é
                    active_page = page.query_selector("span.page.active")
                    if active_page:
                        active_value = active_page.get_attribute("value")
                        if active_value is not None:
                            next_value = int(active_value) + 1
                            next_button = page.query_selector(f"span.page[value='{next_value}']")
                            if next_button:
                                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é value={next_value}")

            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")

            if not next_button:
                print("‚èπÔ∏è –ö–Ω–æ–ø–∫–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º")
                break

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            try:
                print(f"üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {current_page + 1}")

                # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
                notices_before = len(notices_data)

                # –ö–ª–∏–∫–∞–µ–º –ø–æ span —ç–ª–µ–º–µ–Ω—Ç—É
                next_button.click()

                # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                page.wait_for_load_state("networkidle")
                page.wait_for_timeout(3000)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
                # –ò—â–µ–º –Ω–æ–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
                new_active = page.query_selector("span.page.active")
                if new_active:
                    new_active_value = new_active.get_attribute("value")
                    if new_active_value:
                        actual_page = int(new_active_value) + 1  # value –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0
                        print(f"üìç –¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {actual_page}")
                        current_page = actual_page
                    else:
                        current_page += 1
                else:
                    current_page += 1

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è AJAX-–∑–∞–ø—Ä–æ—Å–æ–≤
                page.wait_for_timeout(2000)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                notices_after = len(notices_data)
                new_notices = notices_after - notices_before

                if new_notices > 0:
                    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {new_notices} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞")
                else:
                    print("‚ö†Ô∏è –ù–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ AJAX")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: {e}")
                break

            # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
            if current_page > 50:
                print("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü (50), –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è")
                break

        browser.close()

        print(f"‚úÖ –ò—Ç–æ–≥–æ —Å–æ–±—Ä–∞–Ω–æ {len(notices_data)} –∑–∞–ø–∏—Å–µ–π —Å {current_page} —Å—Ç—Ä–∞–Ω–∏—Ü")

    today_notices = []
    today_str  = today.strftime("%d.%m.%Y")

    for notice in notices_data:
        if 'pub_date' in notice and notice['pub_date'] == today_str:
            today_notices.append(notice)

    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(today_notices)} –∑–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏–∑ {len(notices_data)} –æ–±—â–∏—Ö")

    return today_notices


async def periodic_check_mimz():
    while True:  # ‚Üê –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
        try:
            print("üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ú–ò–ú–ó...")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            keywords = load_keywords()

            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∞–ø–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            loop = asyncio.get_event_loop()
            with ThreadPoolExecutor() as executor:
                notices_data = await loop.run_in_executor(executor, scrape_mimz_sync)

            if notices_data:
                print(f"–ü–æ–ª—É—á–µ–Ω–æ {len(notices_data)} –∑–∞–∫—É–ø–æ–∫")
                today_notices = filter_by_today_date(notices_data)

                if not today_notices:
                    print("üìÖ –ù–µ—Ç –∑–∞–∫—É–ø–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É")
                else:
                    print("üîç –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è:")
                    for i, notice in enumerate(today_notices[:2]):
                        print(f"  –ó–∞–ø–∏—Å—å {i + 1}:")
                        print(f"    number: '{notice.get('number', 'MISSING')}'")

                    filtered_notices, found_count = await filter_notices(notices_data, keywords)
                    print(f"–ù–∞–π–¥–µ–Ω–æ {found_count} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–∫—É–ø–æ–∫ –∏–∑ {len(notices_data)} –æ–±—â–∏—Ö")

                    if filtered_notices:
                        sent_count = await send_all_filtered_notices(filtered_notices)
                        print(f"‚úÖ –ú–ò–ú–ó: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                    else:
                        print("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–∫—É–ø–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            else:
                print("–î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ú–ò–ú–ó: {e}")

        # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        print("‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ú–ò–ú–ó —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç...")
        await asyncio.sleep(300)


