import asyncio

import procession
from pydantic_core.core_schema import none_schema
import re
from aiog import *
import init_clients
import json
import datetime
import editabs
import aiohttp
from simple_tg_md import convert_to_md2
from pathlib import Path

def load_keywords(filepath: str =r"keywords_all_regions") -> list[str]:
    with open(filepath, "r", encoding="utf-8") as f:
        return [line.strip() for line in f if line.strip()]

def load_prompt(filename: str = "prompt.txt") -> list[str]:
    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
    current_file = Path(__file__)
    project_root = current_file.parent.parent  # handlers/../
    filepath = project_root / filename

    if not filepath.exists():
        raise FileNotFoundError(f"–§–∞–π–ª {filepath} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    with open(filepath, "r", encoding="utf-8") as f:
        return [line.strip() for line in f if line.strip()]

prompt = load_prompt("prompt.txt")


def matches_keywords(text: str, keywords: list[str]) -> bool:
    lowered = text.lower()
    return any(keyword.lower() in lowered for keyword in keywords)

def is_relevant(item: dict, keywords: list[str]) -> bool:
    if matches_keywords(item.get("titleName", ""), keywords):
        return True
    if matches_keywords(item.get("name", ""), keywords):
        return True
    for lot in item.get("lotItems", []):
        if matches_keywords(lot.get("name", ""), keywords):
            return True
    return False






def current_time_ms() -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö"""
    today = datetime.datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
    return int(today.timestamp() * 1000)


async def get_page_items(keyword, page, fz_key, session, headers, base_params, url):
    """–ü–æ–ª—É—á–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —Å –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    params = base_params.copy()
    params[fz_key] = "on"
    params["pageNumber"] = page
    params["searchString"] = keyword

    await asyncio.sleep(0.6)

    try:
        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ aiohttp
        async with session.get(url, headers=headers, params=params, timeout=10) as response:
            # –í aiohttp –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è response.status, –∞ –Ω–µ response.status_code
            if response.status != 200:
                print(f"HTTP –æ—à–∏–±–∫–∞ {response.status}")
                return None, False

            # –í aiohttp –Ω—É–∂–Ω–æ await –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
            text = await response.text()
            data = json.loads(text)
            return data.get("data", {}).get("list", []), True

    except aiohttp.ClientError as e:
        print(f"[{fz_key}] –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ keyword='{keyword}': {e}")
        return None, False
    except json.JSONDecodeError as e:
        print(f"[{fz_key}] –û—à–∏–±–∫–∞ JSON –ø—Ä–∏ keyword='{keyword}': {e}")
        # –í aiohttp –Ω–µ—Ç r.text, –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å text –≤—ã—à–µ
        return None, False
    except Exception as e:
        print(f"[{fz_key}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ keyword='{keyword}': {e}")
        return None, False

async def fetch_pages(keyword, fz_key, session, headers, base_params, url):
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü"""
    page = 1
    while True:
        page_items, success = await get_page_items(keyword, page, fz_key, session, headers, base_params, url)

        if not success or not page_items:
            return

        yield page_items
        page += 1


async def get_all_today_items_filter(fz_key: str, fz_name: str, session, headers, base_params, url):
    """–í–µ—Ä—Å–∏—è —Å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º"""
    keywords = load_keywords()
    today_start = current_time_ms()
    found_ids = set()
    all_items = []


    for keyword in keywords:
        async for page_items in fetch_pages (keyword, fz_key, session, headers, base_params, url):
            should_break_keyword = False
            for item in page_items:
                created = item.get("createDate") or item.get("updateDate")

                if not created or created <= today_start:
                    created_date = "Unknown" if not created else datetime.datetime.fromtimestamp(created / 1000)
                    should_break_keyword = True
                    break

                number = item.get("number") or item.get("recordId")
                if not number:
                    print("‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue

                # —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é
                if not is_relevant(item, keywords):
                    continue

                if  editabs.check(str(number), fz_key):
                    continue

                if number:
                    editabs.save(fz=fz_key, number=str(number))
                    print(f"‚úÖ –ó–∞–∫—É–ø–∫–∞ {number} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î")

                uid = f"{fz_key}:{item.get('number') or item.get('recordId')}"
                if uid not in found_ids:

                    response = await init_clients.client_openai.chat.completions.create(
                        model="gpt-4o-mini",
                        messages=[
                            {"role": "system", "content":f"{prompt}"},

                            {"role": "user", "content": f"{item}\n{keywords} "}

                             ],


                    temperature = 0.2
                        )

                    answer_gpt = response.choices[0].message.content.strip()
                    if answer_gpt.lower() == '–Ω–µ—Ç':
                        print(f"‚õî –ó–∞–∫—É–ø–∫–∞ {number} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ GPT")
                        continue
                    else:
                        found_ids.add(uid)
                        print(found_ids)
                        all_items.append(item)
                        print(f"–î–æ–±–∞–≤–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç: {uid}")
                        await send_notice(fz_key,fz_name,item)
                else:
                    print(f"–≠–ª–µ–º–µ–Ω—Ç —É–∂–µ –Ω–∞–π–¥–µ–Ω: {uid}")

            if should_break_keyword:
                break

    found_ids.clear()

    return all_items

async def send_notice(fz_key,fz_name,item):
    users_data = editabs.get_client_users()
    print(f"[{datetime.datetime.now()}] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è {len(users_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    number = item.get("number") or item.get("recordId")

    if not number:
        print("‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return



    messages_sent = 0
    for user_data in users_data:
        if shutdown_event.is_set():
            break

        chat_id = user_data[0] if isinstance(user_data, tuple) else none_schema()
        print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º chat_id: {chat_id}")

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è flood control

        max_messages_per_batch = 5  # –ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Ä–∞–∑

        number = item.get("number") or item.get("recordId")
        title = item.get("titleName", "").strip()
        method_type = item.get("methodType")
        url_path = item.get("card223Url")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL
        if url_path:
            full_url = "https://zakupki.gov.ru" + url_path
        elif method_type == "EA20":
            full_url = f"https://zakupki.gov.ru/epz/order/notice/ea20/view/common-info.html?regNumber={number}"
        elif method_type == "EA44":
            full_url = f"https://zakupki.gov.ru/epz/order/notice/ea44/view/common-info.html?regNumber={number}"
        else:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å URL –¥–ª—è {number} (—Ç–∏–ø: {method_type})")
            continue

        markup = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –∑–∞–∫—É–ø–∫—É", url=full_url)]]
            )
        header = "–í—Å–µ —Ä–µ–≥–∏–æ–Ω—ã\n\nüÜï–ù–æ–≤–∞—è –∑–∞–∫—É–ø–∫–∞ —Å —Å–∞–π—Ç–∞ '–ï–ò–° –∑–∞–∫—É–ø–∫–∏'\n\n"
        text = procession.clean_telegram_message(f"{fz_name}\n{title}")
        text = convert_to_md2(text)
        try:
            await init_clients.bot.send_message(
                chat_id=chat_id,
                text=header+text,
                reply_markup=markup,
                parse_mode=aiogram.enums.ParseMode.MARKDOWN_V2
                )


            messages_sent += 1

            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è flood control
            await asyncio.sleep(1)  # 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

            # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π - –¥–µ–ª–∞–µ–º –±–æ–ª—å—à—É—é –ø–∞—É–∑—É
            if messages_sent >= max_messages_per_batch:
                print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {messages_sent} —Å–æ–æ–±—â–µ–Ω–∏–π, –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É...")
                await asyncio.sleep(10)
                messages_sent = 0

        except aiogram.exceptions.TelegramRetryAfter as e:
            print(f"Flood control: –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å {e.retry_after} —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(e.retry_after + 1)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")

async def process_items(fz_key, fz_name, session):
    """process_items –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é"""
    url = "https://zakupki.gov.ru/api/mobile/proxy/917/epz/order/extendedsearch/results.html"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)",
        "Accept": "application/json, text/javascript, */*; q=0.01",
        "Accept-Language": "ru,en;q=0.9",
        "Referer": "https://zakupki.gov.ru/",
        "X-Requested-With": "XMLHttpRequest",
        }
    base_params = {
        "morphology": "on",
        "sortBy": "PUBLISH_DATE",
        "sortDirection": "false",
        "af":"on",
        "currencyId": "-1",
        }

    try:

        await get_all_today_items_filter(
            fz_key, fz_name, session, headers, base_params, url
            )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_items_with_session: {e}")

shutdown_event = asyncio.Event()

async def periodic_check_all_regions():
    interval = 300.0  # 5 –º–∏–Ω—É—Ç
    while not shutdown_event.is_set():
        start_time = asyncio.get_event_loop().time()
        session = None

        try:
            # –°–æ–∑–¥–∞–µ–º –æ–¥–Ω—É —Å–µ—Å—Å–∏—é –¥–ª—è –≤—Å–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            session = aiohttp.ClientSession()
            print(f"\n[{datetime.datetime.now()}] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É zakupki_allregions")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å –ø–µ—Ä–µ–¥–∞—á–µ–π —Å–µ—Å—Å–∏–∏
            await process_items("fz44", "44-–§–ó",  session)
            await process_items("fz223", "223-–§–ó", session)

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            await asyncio.sleep(0.5)

        except asyncio.CancelledError:
            print("–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            break
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ periodic_check: {e}")
            import traceback
            traceback.print_exc()
        finally:
            # –í–ê–ñ–ù–û: –í—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
            if session:
                await session.close()

        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
        elapsed = asyncio.get_event_loop().time() - start_time
        sleep_time = max(0.0, interval - elapsed)

        print(f"[{datetime.datetime.now()}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è–ª–∞ {elapsed:.2f} —Å–µ–∫")

        # –ñ–¥–µ–º —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
        try:
            await asyncio.wait_for(
                shutdown_event.wait(),
                timeout=sleep_time
                )
            print("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            break
        except asyncio.TimeoutError:
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª
            continue



