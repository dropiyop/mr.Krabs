import asyncio
import aiohttp
import json
import datetime
from playwright.async_api import async_playwright
import editabs
import init_clients
import procession
from simple_tg_md import convert_to_md2
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import aiogram.exceptions
import aiogram.enums
from pathlib import Path

def load_keywords(filepath: str = r"keywords") -> list[str]:
    with open(filepath, "r", encoding="utf-8") as f:
        return [line.strip() for line in f if line.strip()]


def load_prompt(filename: str = "prompt.txt") -> list[str]:
    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
    current_file = Path(__file__)
    project_root = current_file.parent.parent  # handlers/../
    filepath = project_root / filename

    if not filepath.exists():
        raise FileNotFoundError(f"–§–∞–π–ª {filepath} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    with open(filepath, "r", encoding="utf-8") as f:
        return [line.strip() for line in f if line.strip()]

prompt = load_prompt("prompt.txt")

def matches_keywords(text: str, keywords: list[str]) -> bool:
    lowered = text.lower()
    return any(keyword.lower() in lowered for keyword in keywords)


def is_relevant(item: dict, keywords: list[str]) -> bool:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏
    if matches_keywords(item.get("purchaseName", ""), keywords):
        return True

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    if matches_keywords(item.get("description", ""), keywords):
        return True

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    if matches_keywords(item.get("organizationName", ""), keywords):
        return True

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –∑–∞–∫—É–ø–∫–∏
    if matches_keywords(item.get("subject", ""), keywords):
        return True

    return False


def current_time_ms() -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (–Ω–∞—á–∞–ª–æ –¥–Ω—è)"""
    today = datetime.datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
    return int(today.timestamp() * 1000)


async def get_current_user_agent():
    """–ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π User-Agent —á–µ—Ä–µ–∑ Playwright"""
    async with async_playwright() as p:
        browser = await p.chromium.launch()
        page = await browser.new_page()

        user_agent = await page.evaluate("navigator.userAgent")
        await browser.close()
        return user_agent


async def get_page_items(keyword,  session, headers, base_payload, url):

    await asyncio.sleep(0.6)

    try:
        async with session.post(url, headers=headers, json=base_payload, timeout=15) as response:
            if response.status != 200:
                print(f"HTTP –æ—à–∏–±–∫–∞ {response.status}")
                return None, False

            data = await response.json()
            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            items = []
            if isinstance(data, dict):
                if "data" in data:
                    items = data["data"].get("items", []) or data["data"].get("list", [])
                elif "items" in data:
                    items = data["items"]
                elif "result" in data:
                    items = data["result"]
                else:
                    # –ï—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞, –ø–æ–ø—Ä–æ–±—É–µ–º —Å–∞–º data –∫–∞–∫ —Å–ø–∏—Å–æ–∫
                    if isinstance(data, list):
                        items = data
                    else:
                        print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {list(data.keys())}")
                        return [], True

            return items

    except aiohttp.ClientError as e:
        print(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ keyword='{keyword}': {e}")
        return None, False
    except json.JSONDecodeError as e:
        print(f"–û—à–∏–±–∫–∞ JSON –ø—Ä–∏ keyword='{keyword}': {e}")
        return None, False
    except Exception as e:
        print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ keyword='{keyword}': {e}")
        return None, False



async def get_all_today_items_filter(session, headers, base_payload, url):
    """–í–µ—Ä—Å–∏—è —Å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è tender-cache-api"""
    keywords = load_keywords()
    today_start = current_time_ms()
    found_ids = set()
    all_items = []

    print(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Å –≤—Ä–µ–º–µ–Ω–∏: {today_start}")

    for keyword in keywords:
        await asyncio.sleep(1.5)
        page_items = await get_page_items(keyword, session, headers, base_payload, url)

        print(keyword)

        for item in page_items:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            created = None
            for date_field in ["publishDate"]:
                if date_field in item and item[date_field]:
                    created = item[date_field]
                    break

            # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
            if isinstance(created, str):
                try:
                    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã
                    for fmt in ["%Y-%m-%dT%H:%M:%S", "%Y-%m-%d %H:%M:%S", "%Y-%m-%d"]:
                        try:
                            dt = datetime.datetime.strptime(created[:19], fmt)
                            created = int(dt.timestamp() * 1000)
                            break
                        except ValueError:
                            continue
                except (IndexError, TypeError):
                    created = None

            if created and created <= today_start:
                created_date = "Unknown" if not created else datetime.datetime.fromtimestamp(created / 1000)
                break



            # –ü–æ–ª—É—á–∞–µ–º ID –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º ID –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á –¥–ª—è –ë–î)
            item_id = item.get("id")
            if not item_id:
                print("‚ùå ID –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue

            # # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é
            # if not is_relevant(item, keywords):
            #     continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤ –ë–î (–∏—Å–ø–æ–ª—å–∑—É–µ–º ID –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á)
            if editabs.check(str(item_id), ):
                continue

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î (–∏—Å–ø–æ–ª—å–∑—É–µ–º ID –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á)
            editabs.save(number=str(item_id))
            print(f"‚úÖ –ó–∞–∫—É–ø–∫–∞ {item_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î")

            uid = f"tender_api:{item_id}"
            if uid not in found_ids:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ GPT
                try:
                    response = await init_clients.client_openai.chat.completions.create(
                        model="gpt-4o-mini",
                        messages=[
                            {"role": "system", "content":f"{prompt}"},
                            {"role": "user", "content": f"{item}\n{keywords}"}
                            ],
                        temperature=0.2
                        )

                    answer_gpt = response.choices[0].message.content.strip()
                    print(f"–û—Ç–≤–µ—Ç GPT: {answer_gpt[:100]}...")

                    if answer_gpt.lower() == '–Ω–µ—Ç':
                        print(f"‚õî –ó–∞–∫—É–ø–∫–∞ {item_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ GPT")
                        continue
                    else:
                        found_ids.add(uid)
                        all_items.append(item)
                        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç: {uid}")
                        await send_notice(item)

                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT: {e}")
                    # –ï—Å–ª–∏ GPT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
                    found_ids.add(uid)
                    all_items.append(item)
                    await send_notice(item)

            else:
                print(f"–≠–ª–µ–º–µ–Ω—Ç —É–∂–µ –Ω–∞–π–¥–µ–Ω: {uid}")


    found_ids.clear()
    return all_items


async def send_notice(item):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    try:
        users_data = editabs.get_client_users()
        print(f"[{datetime.datetime.now()}] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è {len(users_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        # –ü–æ–ª—É—á–∞–µ–º ID –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
        item_id = item.get("id")
        if not item_id:
            print("‚ùå ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return



        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        title = ""
        if "lotItems" in item and isinstance(item["lotItems"], list) and item["lotItems"]:
            lot_name = item["lotItems"][0].get("name")
            if lot_name:
                title = str(lot_name).strip()




        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –Ω–∞ –æ—Å–Ω–æ–≤–µ ID
        full_url = f"https://agregatoreat.ru/purchases/announcement/{item_id}/info"

        messages_sent = 0
        max_messages_per_batch = 5

        for user_data in users_data:
            if shutdown_event.is_set():
                break

            chat_id = user_data[0] if isinstance(user_data, tuple) else user_data
            print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º chat_id: {chat_id}")

            markup = InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –∑–∞–∫—É–ø–∫—É", url=full_url)]]
                )

            # –§–æ—Ä–º–∏—Ä—É–µ–º –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            header = f"üÜï –ù–æ–≤–∞—è –∑–∞–∫—É–ø–∫–∞ —Å —Å–∞–π—Ç–∞ EAT'\n\n"
            text = f"üìã {title}"

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
            if "organizerInfo" in item and item["organizerInfo"].get("name"):
                text += f"\n\nüè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {item['organizerInfo']['name']}\n"

            text = convert_to_md2(text)

            try:
                await init_clients.bot.send_message(
                    chat_id=chat_id,
                    text=header+text,
                    reply_markup=markup,
                    parse_mode=aiogram.enums.ParseMode.MARKDOWN_V2
                    )

                messages_sent += 1
                await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

                if messages_sent >= max_messages_per_batch:
                    print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {messages_sent} —Å–æ–æ–±—â–µ–Ω–∏–π, –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É...")
                    await asyncio.sleep(10)
                    messages_sent = 0

            except aiogram.exceptions.TelegramRetryAfter as e:
                print(f"Flood control: –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å {e.retry_after} —Å–µ–∫—É–Ω–¥")
                await asyncio.sleep(e.retry_after + 1)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ send_notice: {e}")


async def process_tender_api(session):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ tender-cache-api"""
    url = "https://tender-cache-api.agregatoreat.ru/api/TradeLot/list-published-trade-lots"

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π User-Agent
    user_agent = await get_current_user_agent()

    headers = {
        "Content-Type": "application/json; charset=UTF-8",
        "Accept": "application/json, text/plain, */*",
        "Origin": "https://agregatoreat.ru",
        "Referer": "https://agregatoreat.ru/",
        "User-Agent": user_agent
        }

    # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    base_payload = {

    "page": 1,
    "size": 100,
    "lotStates": [2],
    "isEatOnly": True,
   "sort": [{"fieldName": "publishDate", "direction": 2}],

"organizerRegions": ["40"]

}

    try:
        await get_all_today_items_filter(session, headers, base_payload, url)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_tender_api: {e}")
        import traceback
        traceback.print_exc()


shutdown_event = asyncio.Event()


async def periodic_check_eat():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–∫—É–ø–æ–∫"""
    interval = 300.0  # 5 –º–∏–Ω—É—Ç

    while not shutdown_event.is_set():
        start_time = asyncio.get_event_loop().time()
        session = None

        try:
            # –°–æ–∑–¥–∞–µ–º –æ–¥–Ω—É —Å–µ—Å—Å–∏—é –¥–ª—è –≤—Å–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            connector = aiohttp.TCPConnector(limit=10)
            timeout = aiohttp.ClientTimeout(total=30)
            session = aiohttp.ClientSession(connector=connector, timeout=timeout)
            print(f"\n[{datetime.datetime.now()}] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ï–ê–¢")
            await process_tender_api(session)

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            await asyncio.sleep(0.5)

        except asyncio.CancelledError:
            print("–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            break
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ periodic_check: {e}")
            import traceback
            traceback.print_exc()
        finally:
            # –í–ê–ñ–ù–û: –í—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
            if session:
                await session.close()

        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
        elapsed = asyncio.get_event_loop().time() - start_time
        sleep_time = max(0.0, interval - elapsed)

        print(f"[{datetime.datetime.now()}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è–ª–∞ {elapsed:.2f} —Å–µ–∫")

        # –ñ–¥–µ–º —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
        try:
            await asyncio.wait_for(
                shutdown_event.wait(),
                timeout=sleep_time
                )
            print("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            break
        except asyncio.TimeoutError:
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª
            continue



